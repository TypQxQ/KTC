########################################################################
# Tool change macros for Mainsail compability
#######################################################################
[gcode_macro T_1]
gcode: KTC_TOOL_DROPOFF_ALL
[gcode_macro T0]
variable_active: 0
gcode: _SET_ACTIVE_TOOL TOOL=0
[gcode_macro T1]
variable_active: 0
gcode: _SET_ACTIVE_TOOL TOOL=1
[gcode_macro T2]
variable_active: 0
gcode: _SET_ACTIVE_TOOL TOOL=2
[gcode_macro T3]
variable_active: 0
gcode: _SET_ACTIVE_TOOL TOOL=3
[gcode_macro T4]
variable_active: 0
gcode: _SET_ACTIVE_TOOL TOOL=4
[gcode_macro T5]
variable_active: 0
gcode: _SET_ACTIVE_TOOL TOOL=5
[gcode_macro T6]
variable_active: 0
gcode: _SET_ACTIVE_TOOL TOOL=6
[gcode_macro T7]
variable_active: 0
gcode: _SET_ACTIVE_TOOL TOOL=7
[gcode_macro T8]
variable_active: 0
gcode: _SET_ACTIVE_TOOL TOOL=8
[gcode_macro T9]
variable_active: 0
gcode: _SET_ACTIVE_TOOL TOOL=9
[gcode_macro T10]
variable_active: 0
gcode: _SET_ACTIVE_TOOL TOOL=10
[gcode_macro T11]
variable_active: 0
gcode: _SET_ACTIVE_TOOL TOOL=11
[gcode_macro T49]
variable_active: 0
gcode: _SET_ACTIVE_TOOL TOOL=49

[gcode_macro T20]
variable_active: 0
gcode: _SET_ACTIVE_TOOL TOOL=20

[gcode_macro TOOL_DROPOFF]
gcode:
  KTC_TOOL_DROPOFF_ALL
  _SET_ALL_TOOLS_DEACTIVE


[gcode_macro _SET_ACTIVE_TOOL]
description: Sets the active tool in mainsail (and all others inactive)
gcode:
  _SET_ALL_TOOLS_DEACTIVE
  {% set TOOL = params.TOOL|default(-1)|int %}
  SET_GCODE_VARIABLE MACRO=T{TOOL} VARIABLE=active VALUE=1
  KTC_T{TOOL}

[gcode_macro _SET_ALL_TOOLS_DEACTIVE]
description: Sets the active tool in mainsail (and all others inactive)
gcode:
  SET_GCODE_VARIABLE MACRO=T0 VARIABLE=active VALUE=0
  SET_GCODE_VARIABLE MACRO=T1 VARIABLE=active VALUE=0
  SET_GCODE_VARIABLE MACRO=T2 VARIABLE=active VALUE=0
  SET_GCODE_VARIABLE MACRO=T3 VARIABLE=active VALUE=0
  SET_GCODE_VARIABLE MACRO=T4 VARIABLE=active VALUE=0
  SET_GCODE_VARIABLE MACRO=T5 VARIABLE=active VALUE=0
  SET_GCODE_VARIABLE MACRO=T6 VARIABLE=active VALUE=0
  SET_GCODE_VARIABLE MACRO=T7 VARIABLE=active VALUE=0
  SET_GCODE_VARIABLE MACRO=T8 VARIABLE=active VALUE=0
  SET_GCODE_VARIABLE MACRO=T9 VARIABLE=active VALUE=0
  SET_GCODE_VARIABLE MACRO=T10 VARIABLE=active VALUE=0
  SET_GCODE_VARIABLE MACRO=T11 VARIABLE=active VALUE=0
  SET_GCODE_VARIABLE MACRO=T20 VARIABLE=active VALUE=0
  SET_GCODE_VARIABLE MACRO=T49 VARIABLE=active VALUE=0

[gcode_macro _TOOL_LOCK_ENDSTOP_CHECK]
description: Before this is called and evaluated a QUERY_ENDSTOPS checks the endstops. If not triggered this will advance the stepper 1*, check the endstop and call the next step.
gcode:
    # If endstop is not triggered then try to lock again just in case the lock slipped. Need to check the endstops before calling this. 
    # {% if printer.ktc.last_endstop_query['manual_stepper tool_lock']|default(0) == 0  %}
    {% if printer.ktc.last_endstop_query['manual_stepper tool_lock']|default(False) == False  %}
#    {% if printer.query_endstops.last_query['manual_stepper tool_lock']|default(0) == 0 %}
      {action_respond_info("TOOL_LOCK_ENDSTOP_CHECK: Endstop on manual_stepper tool_lock not triggered at check.") }
      MANUAL_STEPPER STEPPER=tool_lock SET_POSITION=140                                 # Set assumed possition as rotated to max (should already be this)
      MANUAL_STEPPER STEPPER=tool_lock Move=142 SPEED=50 STOP_ON_ENDSTOP=2 SYNC=1       # Move 2 degrees over max and stop on endstop. If Endstop is not triggered then raise an error. Wait for the movement before continuing.
      M400
#      QUERY_ENDSTOPS
#      G4 P1000 # Dwell one second.
      KTC_ENDSTOP_QUERY ENDSTOP='manual_stepper tool_lock' ATEMPTS=3
      _TOOL_LOCK_ENDSTOP_CHECK_SECONDSTAGE
    {% endif %}

[gcode_macro _TOOL_LOCK_ENDSTOP_CHECK_SECONDSTAGE]
description: Before this is called and evaluated a QUERY_ENDSTOPS checks the endstops. If not triggered this will advance the stepper 1*, check the endstop and call the next step.
gcode:
    # If endstop is not triggered then try to lock again just in case the lock slipped. Need to check the endstops before calling this. 
    # {% if printer.ktc.last_endstop_query['manual_stepper tool_lock']|default(0) == 0  %}
    {% if printer.ktc.last_endstop_query['manual_stepper tool_lock']|default(False) == False  %}
#    {% if printer.query_endstops.last_query['manual_stepper tool_lock']|default(0) == 0 %}
      {action_respond_info("TOOL_LOCK_ENDSTOP_CHECK: Endstop on manual_stepper tool_lock not triggered at check.") }
      MANUAL_STEPPER STEPPER=tool_lock SET_POSITION=140                                 # Set assumed possition as rotated to max (should already be this)
      MANUAL_STEPPER STEPPER=tool_lock Move=142 SPEED=50 STOP_ON_ENDSTOP=2 SYNC=1       # Move 2 degrees over max and stop on endstop. If Endstop is not triggered then raise an error. Wait for the movement before continuing.
 #     M400
 #     QUERY_ENDSTOPS
 #     G4 P1000 # Dwell one second.
 #     QUERY_ENDSTOPS
 #     G4 P1000 # Dwell one second.
    #  QUERY_ENDSTOPS
 #     G4 P1000 # Dwell one second.
      KTC_ENDSTOP_QUERY ENDSTOP='manual_stepper tool_lock' ATEMPTS=3
      _TOOL_LOCK_ENDSTOP_CHECK_THIRDSTAGE
    {% endif %}

[gcode_macro _TOOL_LOCK_ENDSTOP_CHECK_THIRDSTAGE]
description: Before this is called and evaluated a QUERY_ENDSTOPS checks the endstops. If not triggered this either pause the print or throw an error.
gcode:
  # If endstop is not triggered then pause or raise error.
  {% if printer.ktc.last_endstop_query['manual_stepper tool_lock']|default(False) == False  %}
    KTC_LOG_INFO MSG="_TOOL_LOCK_ENDSTOP_CHECK_THIRDSTAGE: Endstop on manual_stepper tool_lock still not triggered at second check. Pauses untill endstop is triggerd."
    SET_TMC_CURRENT STEPPER=tool_lock CURRENT=0.7             # Decrease current to somewhat lower current.
    KTC_SET_ALL_TOOL_HEATERS_OFF
    KTC_ENDSTOP_QUERY ENDSTOP='manual_stepper tool_lock'     # Running continuesly until triggered and called by GCODE so it will be executed after previous commands in order.

    # After this we asume the error is fixed and can resume.
    KTC_RESUME_ALL_TOOL_HEATERS

  {% endif %}

[gcode_macro _TOOL_LOCK_CHECK]
description: Check so the tool is mounted by slightly advancing the lock again until hit endstop, only if endstop not already hit. Do not wait for it to finish.
gcode:
  # If endstop is not triggered then try to lock again for safety. Need to check the endstops before calling this. 
  {% if printer.ktc.last_endstop_query['manual_stepper tool_lock']|default(False) == False  %}
    SET_TMC_CURRENT STEPPER=tool_lock CURRENT=1.0
    MANUAL_STEPPER STEPPER=tool_lock SET_POSITION=140                                 # Set assumed possition as rotated to max (should already be this)
    MANUAL_STEPPER STEPPER=tool_lock Move=150 SPEED=50 STOP_ON_ENDSTOP=2 SYNC=1       # Move 10 degrees over max and stop on endstop. If Endstop is not triggered then raise an error. Wait for the movement before continuing.
    # Ceck if the tool is locked by checking on the endstops.
    KTC_ENDSTOP_QUERY ENDSTOP='manual_stepper tool_lock' ATEMPTS=3
    # QUERY_ENDSTOPS
    _TOOL_LOCK_ENDSTOP_CHECK
    M400
    SET_TMC_CURRENT STEPPER=tool_lock CURRENT=0.8
  {% endif %}


[gcode_macro _TOOL_UNLOCK_ENDSTOP_CHECK]
description: Before this is called and evaluated a QUERY_ENDSTOPS checks the endstops. If not triggered this either pause the print or throw an error.
gcode:
  # If endstop is not triggered then pause or raise error.
  {% if printer.ktc.last_endstop_query['manual_stepper tool_lock']|default(False) == False  %}
    {action_respond_info("_TOOL_UNLOCK_ENDSTOP_CHECK: Endstop on manual_stepper tool_lock still not triggered at unlock.") }
    # {% if printer['gcode_macro HOMING_STATUS'].z|int == 3 %}  # If printer is homing Z
    #   { action_emergency_stop("The tool didn't unlock during homing.") }     # Emergency stop so we don't crash the bed. Pause won't work.
    # {% endif %}
    SET_TMC_CURRENT STEPPER=tool_lock CURRENT=0.7             # Decrease current to somewhat lower current.
    KTC_LOG_INFO MSG="_TOOL_LOCK_ENDSTOP_CHECK_THIRDSTAGE: Endstop on manual_stepper tool_lock still not triggered at second check. Pauses untill endstop is triggerd."
    KTC_SET_ALL_TOOL_HEATERS_OFF
    KTC_ENDSTOP_QUERY ENDSTOP='manual_stepper tool_lock'     # Running continuesly until triggered and called by GCODE so it will be executed after previous commands in order.

    # After this we asume the error is fixed and can resume.
    KTC_RESUME_ALL_TOOL_HEATERS
  {% endif %}


[gcode_macro TOOL_UNLOCK]
gcode:
  KTC_TOOL_UNLOCK
  M117 Current Tool set to -1
  { action_respond_info('Current Tool set to -1 (Unlocked).') }


[gcode_macro TOOL_LOCK]
gcode:
  KTC_TOOL_LOCK
  M117 Current Tool set to -2
  { action_respond_info('Current Tool set to -2 (Unknown tool). To indicate actual tool, use KTC_SAVE_CURRENT_TOOL Tn') }

[gcode_macro SAVE__CURRENT__TOOL]
gcode:
  {% if params.T is defined %}
    KTC_SAVE_CURRENT_TOOL T{params.T}
  {% endif %}

[gcode_macro SAVE_ACCELERATION]
variable_max_accel: 0
gcode:
  SET_GCODE_VARIABLE MACRO=SAVE_ACCELERATION VARIABLE=max_accel VALUE={printer.toolhead.max_accel}

[gcode_macro RESTORE_ACCELERATION]
gcode:
  {% if printer['gcode_macro SAVE_ACCELERATION'].max_accel|int == 0 %}
    { action_respond_info("RESTORE_ACCELERATION: No acceleration saved.") }
  {% else %}
    M204 S{printer['gcode_macro SAVE_ACCELERATION'].max_accel}
  {% endif %}

[gcode_macro KTC__DUMP__PRINT__STATS]
gcode:
  KTC_DUMP_PRINT_STATS

[gcode_macro KTC__INIT__PRINT__STATS]
gcode:
  KTC_INIT_PRINT_STATS
